PRE-REQUISITES
1. Server up and running (Ubuntu 20.04), reachable over the internet
2. SSH daemon installed
3. Python3 installed
4. SSH-Keys configured for remote administration (root user)
5. Ansible installed on control node + community.docker and community.general Ansible modules -> ansible-galaxy install community.docker community.general

GOAL
- Automate the installation of a WordPress site on a remote server

CONDITIONS
- Site should be able to restart when server is rebooted (at Docker level ? (restart policy/live restore), at system level ? (Docker daemon gets started at boot --> vendor preset))
- No secrets should be left in clear (make use of Ansible Vault)
- Data should persist when server rebooted (use of Docker bind mounts or volumes ?)
- Possibility to deploy site on several servers simultaneously (easy with Ansible inventory)
- Possibility to only install one service on the server -> Make code modular (use of Ansible tags)
- Secure and limited access to server (firewall + basic security setup)
- Install all services needed for Wordpress (MySQL, PHP, ...) with dedicated Dockerfiles
- Use TLS (Transport Layer Security) for server
- When URL requested, redirect to correct site
- Use variables to make configurations easier

STEPS

1) Setup system and security (ROLE: initial_server_setup)
  1a) Set timezone to Europe/Paris
  1b) Update and upgrade system packages (apt update + upgrade)
  1c) Setup firewall (install ufw and configure it)
  1d) Disable root SSH auth + only allow ssh key authentification + plan SSH service restart
2) Setup user (ROLE: users)
  2a) Add sudo-user
  2b) Add SSH keys for this user
3) Install Docker (ROLE: docker_install)
4) Setup project files (ROLE: docker_project_setup)
  4a) Create services folders
  4b) Copy docker-compose file
5) Setup Mariadb (ROLE: mariadb)
  5a) Copy Dockerfile and Mariadb config files
  5b) Launch Mariadb through docker-compose
6) Setup Wordpress (ROLE: wordpress)
  6a) Copy Dockerfile and Wordpress config files
  6b) Launch Wordpress through docker-compose
7) Setup PhpMyAdmin (ROLE: phpmyadmin)
  7a) Copy Dockerfile and PhpMyAdmin config files
  7b) Launch PhpMyAdmin through docker-compose
8) Setup Certbot (ROLE: certbot)
  8a) Copy Dockerfile
  8b) Launch Certbot through docker-compose
  8c) Create job to periodically try to recreate certificate
